#!/usr/bin/env python
#
# Copyright (C) 2015,  Massachusetts Institute of Technology
# 
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
# 
# This program is distributed in the hope that it will be useful, but 
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
# 
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc., 
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
# 
# Please email droidsafe@lists.csail.mit.edu if you need additional
# information or have any questions.

from __future__ import print_function
import sys
import os
import subprocess
import socket

# if your hostname is one of these, then issue a server run (use BIG GB memory)
SERVERS = ["hippo", "rhino"]

HOSTNAME = socket.gethostname()
JARS = ["droidsafe-core.jar","droidsafe-libs.jar"]
MAIN_CLASS = "droidsafe.main.Main"
DROIDSAFE_SRC_HOME = os.environ['DROIDSAFE_SRC_HOME'] + os.sep

SERVER_MEMORY="64"
DESKTOP_MEMORY="6"#"16"# we don't have the same computing capabilities as MIT

def run_droidsafe(args):
    print("[DEBUG] start of run_droidsafe()!")
    libs = DROIDSAFE_SRC_HOME + "bin" + os.sep
    java_command = []
    java_command.append("java")
    java_command.append("-cp")

    classpath = ""
    for jar in JARS:
    	classpath += libs + jar + ":"
    #needed for logback configuration
    classpath += DROIDSAFE_SRC_HOME + "config-files"
    classpath += ":."
    java_command.append(classpath)

    #uncomment for yourkit profiler
    #java_command.append("-agentpath:/Users/mgordon/tools/YourKit_Java_Profiler_2013_build_13072.app/bin/mac/libyjpagent.jnilib")

    java_command.append("-Djava.library.path=" + DROIDSAFE_SRC_HOME + "lib")

    if ("DROIDSAFE_DEBUG" in os.environ and os.environ['DROIDSAFE_DEBUG'] is "1"):
        print("Debugging...")
        java_command.append("-agentlib:jdwp=transport=dt_socket,address=127.0.0.1:8888,server=y,suspend=y")
        
    
    if ("DROIDSAFE_MEMORY" in os.environ):
        DROIDSAFE_MEMORY = os.environ['DROIDSAFE_MEMORY']
        print("Setting memory size to " + DROIDSAFE_MEMORY + "GB")
        java_command.append("-Xms1g")
        java_command.append("-Xmx" + DROIDSAFE_MEMORY + "g")
    else:
        if (HOSTNAME in SERVERS):
            print("Server run: setting memory size to " + SERVER_MEMORY + "GB")
            java_command.append("-Xms2g")
            java_command.append("-Xmx" + SERVER_MEMORY+ "g")
        else:
            java_command.append("-Xms1g")
            java_command.append("-Xmx" + DESKTOP_MEMORY+ "g")
    
#   java_command.append("-Xrunhprof:heap=sites,depth=6")
    java_command.append("-Dfile.encoding=UTF-8")

    #search args for -strict to enable assertions
    for arg in args[1:]:
        if "-strict" in args:
            java_command.append("-enableassertions")


    java_command.append(MAIN_CLASS)
    
    #append arguments
    for arg in args[1:]:
        java_command.append(arg)

    print("[DEBUG] Running command:", java_command)
    return subprocess.call(java_command)



def check_env_vars(): 
    if not "ANDROID_SDK_HOME" in os.environ:
        print("Need to set ANDROID_SDK_HOME to the root of your android sdk installation.")
        sys.exit(1)
        
    if not "DROIDSAFE_SRC_HOME" in os.environ:
        print("Need to set DROIDSAFE_SRC_HOME to the root of your apac repository.")
        sys.exit(1)

# Gather our code in a main() function
def main():
    check_env_vars()
    return run_droidsafe(sys.argv)


# Standard boilerplate to call the main() function to begin
# the program.
if __name__ == '__main__':
    sys.exit(main())
